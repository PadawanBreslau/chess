%div.game_display
  %div.game_header
    %div.game_players
      = link_to @chess_game.white_player.to_name, @chess_game.white_player
      = '-'
      = link_to @chess_game.black_player.to_name, @chess_game.black_player
      = "  (#{@chess_game.chess_result})"

  %div.chessboard{id: "chessboard", style: "width: 500px; margin-top: 50px"}
  %div.move_manipulation
    %input#startPosition{type: "button", value: "Start"}/
    %input#moveBackward{type: "button", value: "<-"}/
    %input#moveForward{type: "button", value: "->"}/
    %input#endPosition{type: "button", value: "End"}/
    %input#flipBoard{type: "button", value: "Flip"}/
    %input#autoPlay{type: "button", value: "Auto"}/
    %input#autoPlayStop{type: "button", value: "Stop Auto"}/
%div.move_notation
  - moves_in_row = 6
  - counter = 0
  = @chess_game.chess_moves.each_slice(2*moves_in_row).with_index do |five_move_slice, k|
    %div.five_move_slice
      = five_move_slice.each_slice(2).with_index do |move_slice, i|
        %div.move
          %div.number
            = "#{k*moves_in_row+i+1}."
          - move_slice.each_with_index do |move,j|
            - counter = counter + 1
            %input.moveSelection{type: "button", notation: "#{move.move_notation}",
            value: "#{move.get_move_output}", fen: "#{move.fen_after}", counter: "#{counter}", id:"notation-#{counter-1}"}/
  %div.variations
    %div.engine_description
      = "Stockfish 666"
      %input#forceReload{type: "button", value: "Force Reload"}/
    %div.analysis
      - @chess_game.chess_moves.first.variations.take(3).each_with_index do |variation,i|
        %span.variation_line{ id: "line-#{i}"}
          = "..."
:css
  .highlight-white {
    -webkit-box-shadow: inset 0 0 3px 3px yellow;
    -moz-box-shadow: inset 0 0 3px 3px yellow;
    box-shadow: inset 0 0 3px 3px yellow;
  }

:javascript
  var set_notation_highlight = function(){
    $("input[id*='notation-']").removeClass('highlight-white');
    $('#notation-' + counter).addClass('highlight-white');
  }
  var set_notation_highlight_decrease = function(){
    $("input[id*='notation-']").removeClass('highlight-white');
    $('#notation-' + (counter - 1)).addClass('highlight-white');
  }
  var reloadVariations = function(){
    //alert('Reload the variations now');
    };
  var increase = function(value, limit, is_castle){
    if(value+1 < limit){
      value++;
    }
    if(is_castle){
     castles++;
    }
    return value;
  };
  var decrease  = function(value){
    if(value-1 >= 0){
      value--;
    }
    if(is_castle){
      castles--;
    }
    return value;
  };
  var castle = function(move1, move2){
    move_from_1 = move1.substring(0,2);
    move_to_1 = move1.substring(3,5);
    move_from_2 = move2.substring(0,2);
    move_to_2 = move2.substring(3,5);
    if(move_from_1=='e1' && move_to_1=='g1' && move_from_2=="h1" && move_to_2=='f1'){
      return true;}
    else if(move_from_1=='e8' && move_to_1=='g8' && move_from_2=="h8" && move_to_2=='f8'){
      return true;}
    else if(move_from_1=='e1' && move_to_1=='g1' && move_from_2=="a1" && move_to_2=='d1'){
      return true;}
    else if(move_from_1=='e8' && move_to_1=='g8' && move_from_2=="a8" && move_to_2=='d8'){
      return true;}
    else{
      return false;}
  };
  var move_up = function(){
    move_from = moves[counter+castles].substring(0,2);
    move_to = moves[counter+castles].substring(3,5);

    boardEl.find('.' + squareClass).removeClass('highlight-white');
    boardEl.find('.square-' + move_from).addClass('highlight-white');
    boardEl.find('.square-' + move_to).addClass('highlight-white');
    set_notation_highlight();
    is_castle = castle(moves[counter], moves[counter+1]);
    counter = increase(counter, max_counter, is_castle);
    chessboard.position(fen_before[counter], false);
  };
  var move_down = function(){
    boardEl.find('.' + squareClass).removeClass('highlight-white');
    is_castle = castle(moves[counter-2], moves[counter-1]);
    counter = decrease(counter, is_castle);
    set_notation_highlight_decrease();
    chessboard.position(fen_before[counter], false);
  };

  var jump_down = function(jump_value){
    var i = jump_value*2;
    while(i--){
      move_down();
    }
  }

  var jump_up = function(jump_value){
    var i = jump_value*2;
    while(i--){
      move_up();
    }
  }


  var cfg = {
    showNotation: false,
    position: 'start',
    onChange: reloadVariations
  };


  var chessboard = new ChessBoard('chessboard', cfg);
  var boardEl = $('#chessboard');
  var moves = #{@chess_game.all_moves};
  var fen_before = #{@chess_game.all_before_move_fens};
  var counter = 0;
  var max_counter = moves.length;
  var move_from;
  var move_to;
  var squareClass = 'square-55d63';
  var castles = 0;
  var jump_value = 6;
  var move_auto;
  $('#autoPlayStop').hide();


  $(document).keydown (function (e) {
    var keyStroke = e.keyCode;
    if(keyStroke == 39){
      move_up();
    }
    else if(keyStroke == 37){
      move_down();
    }
    else if(keyStroke == 38){
      jump_down(jump_value);
    }
    else if(keyStroke == 40){
      jump_up(jump_value);
    }
  });

  $('#flipBoard').on('click', function() {
    chessboard.flip();
  });
  $('#forceReload').on('click', function() {
    reloadVariations();
  });

  $('#autoPlay').on('click', function() {
    $(this).hide();
    $('#autoPlayStop').show();
    move_auto = setInterval(move_up, 1000);
  });

  $('#autoPlayStop').on('click', function() {
    $(this).hide();
    $('#autoPlay').show();
    clearInterval(move_auto);
  });

  $('#startPosition').on('click', function() {
    chessboard.position('start', false);
    counter = 0;
    set_notation_highlight();
  });

  $('#endPosition').on('click', function() {
    counter = fen_before.length-1;
    set_notation_highlight();
    chessboard.position(fen_before[fen_before.length-1], false);
  });

  $('#moveForward').on('click', function() {
    move_up();
  });

  $('#moveBackward').on('click', function() {
    move_down();
  });


  $('.moveSelection').each(function(index) {
    $(this).click(function() {
      boardEl.find('.' + squareClass).removeClass('highlight-white');
      move = $(this).attr("notation");
      move_from = move.substring(0,2);
      move_to = move.substring(3,5);
      boardEl.find('.square-' + move_from).addClass('highlight-white');
      boardEl.find('.square-' + move_to).addClass('highlight-white');
      counter = $(this).attr("counter");
      $("input[id*='notation-']").removeClass('highlight-white');
      $(this).addClass('highlight-white');
      chessboard.position($(this).attr("fen"), false);
    });
  });

